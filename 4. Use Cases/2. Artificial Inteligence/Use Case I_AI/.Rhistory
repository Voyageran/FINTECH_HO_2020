meanret<-list()
stdev<-list()
g<-list()
COVrmt<-list()
for(t in 1: length(W_in)){
r[[t]] <- matrix(colMeans(W_in[[t]]), nrow=1)
meanret[[t]]<-sum(r[[t]])/92
stdev[[t]]<-apply(W_in[[t]],2,sd)
stdev[[t]]<-matrix(stdev[[t]]) #sd vector
rownames(stdev[[t]])<-colnames(W_in[[t]])
g[[t]]<-stdev[[t]]%*%t(stdev[[t]])
COVrmt[[t]]<-g[[t]]*C_1[[t]]
COVrmt[[t]]<-as.matrix(COVrmt[[t]])
}
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port<-list()
retport<-list()
retport1<-list()
portequally<-list()
retportequally<-list()
retport1equally<-list()
VaR_port<-list()
CVaR_port<-list()
VaR_port_equally<-list()
CVaR_port_equally<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port[[t]]<-colSums(aus)
VaR_port[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
retport[[t]]<-mean(colSums(aus))
retport1[[t]]<-sd(colSums(aus))
equallyweighted<-matrix(rep(1/92),92,1)
equallyweighted<-equallyweighted
ausequally<-repmat(equallyweighted,1,21)*t(W_out[[t]])
ausequally<-as.matrix(ausequally)
portequally[[t]]<-colSums(ausequally)
VaR_port_equally[[t]]<-VaR(W_out[[t]], weights=equallyweighted, p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port_equally[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
retportequally[[t]]<-mean(colSums(ausequally))
retport1equally[[t]]<-sd(colSums(ausequally))
}
pport<-as.matrix(cbind(unlist(port)))
pportequally<-as.matrix(cbind(unlist(portequally)))
p<-cumsum(pport)
pp<-cumsum(pportequally)
retport<-as.matrix(unlist(retport))
retport<-cumsum(retport)
retport1<-as.matrix(unlist(retport1))
retport1<-cumsum(retport1)
retportequally<-as.matrix(unlist(retportequally))
retport1equally<-as.matrix(unlist(retport1equally))
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port0.05<-list()
max_dd_ptf0.05<-list()
as0.05<-list()
dd0.05<-list()
VaR_port0.05<-list()
CVaR_port0.05<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = 0.05*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port0.05[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port0.05[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port0.05[[t]]<-colSums(aus)
}
pport0.05<-as.matrix(cbind(unlist(port0.05)))
p0.05<-cumsum(pport0.05)
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port0.005<-list()
VaR_port0.005<-list()
CVaR_port0.005<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = 0.005*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port0.005[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port0.005[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port0.005[[t]]<-colSums(aus)
}
pport0.005<-as.matrix(cbind(unlist(port0.005)))
p0.005<-cumsum(pport0.005)
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port0.15<-list()
VaR_port0.15<-list()
CVaR_port0.15<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = 0.15*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port0.15[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port0.15[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port0.15[[t]]<-colSums(aus)
}
pport0.15<-as.matrix(cbind(unlist(port0.15)))
p0.15<-cumsum(pport0.15)
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port0.025<-list()
VaR_port0.025<-list()
CVaR_port0.025<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = 0.025*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port0.025[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port0.025[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port0.025[[t]]<-colSums(aus)
}
pport0.025<-as.matrix(cbind(unlist(port0.025)))
p0.025<-cumsum(pport0.025)
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port4<-list()
VaR_port4<-list()
CVaR_port4<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = 4*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port4[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port4[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port4[[t]]<-colSums(aus)
}
pport4<-as.matrix(cbind(unlist(port4)))
p4<-cumsum(pport4)
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port2<-list()
VaR_port2<-list()
CVaR_port2<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
#dvec=rep(0,92) no max  dei rendimenti ma solo vincolo
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = 2*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port2[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port2[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port2[[t]]<-colSums(aus)
}
pport2<-as.matrix(cbind(unlist(port2)))
pp2<-cumsum(pport2)
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port0.7<-list()
dsr0.7<-list()
VaR_port0.7<-list()
CVaR_port0.7<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
#dvec=rep(0,92) no max  dei rendimenti ma solo vincolo
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = 0.7*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port0.7[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port0.7[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port0.7[[t]]<-colSums(aus)
}
pport0.7<-as.matrix(cbind(unlist(port0.7)))
p0.7<-cumsum(pport0.7)
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port0<-list()
dsr0<-list()
VaR_port0<-list()
CVaR_port0<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
#dvec=rep(0,92) no max  dei rendimenti ma solo vincolo
sol[[t]]<- solve.QP(Dmat=COVrmt[[t]], dvec = matrix(0,92,1), Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes2$id,nodes2$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port0[[t]]<-VaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MVaR
CVaR_port0[[t]]<-CVaR(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port0[[t]]<-colSums(aus)
}
pport0<-as.matrix(cbind(unlist(port0)))
p0<-cumsum(pport0)
## BENCHMARK
MSW_prezzi<-read.table("MSCI_W.csv", header=TRUE, sep=",", dec=".")
ZOOMSW<- zoo(MSW_prezzi[,-1], order.by=as.Date(as.character(MSW_prezzi$Date), format='%m/%d/%Y'))
MSW<- Return.calculate(ZOOMSW, method="log")
MSW<- MSW[-1, ]
MSW<-xts(MSW)
View(MSW)
dim(MSW)
MSW<-MSW[-c(3170:3173),]
tail(MSW)
MSW1<-MSW[-c(1:229)]
MSW_cum<-cumsum(MSW1)
W_MSW<-list()
for(t in 0: 139){
W_MSW[[(t+1)]]=MSW[(1+t*21):(t*21+250),]
}
W_MSW_in<-list()
W_MSW_out<-list()
for(t in 1: 140){
W_MSW_in[[(t)]]=W_MSW[[t]][c(1:229),]
W_MSW_out[[(t)]]=W_MSW[[t]][c(230:250),]
}
VaR_MSW<-list()
CVaR_MSW<-list()
for(t in 1: 140){
VaR_MSW[[t]]<-VaR(W_MSW_out[[t]], p=0.95, portfolio_method ="single", method="modified")
CVaR_MSW[[t]]<-CVaR(W_MSW_out[[t]], p=0.95, portfolio_method ="single", method="modified")
}
## GLASSO
C<- list()
C_glasso<-list()
for(t in 1: length(W_in)){
print(t)
C[[(t)]] =var(W_in[[(t)]])
C_glasso[[(t)]]<-glasso(C[[(t)]], rho=0.01)$w
C_glasso[[(t)]]<-round(C_glasso[[(t)]],4)
}
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port_glasso<-list()
for(t in 1: 140){
print(t)
B[[t]]<- matrix(1,1,92)
B[[t]]<- rbind(B[[t]], r[[t]], diag(92),-diag(92))
f[[t]]<- c(1, meanret[[t]], rep(0,92),rep(-1,92))
sol[[t]]<- solve.QP(Dmat=C_glasso[[t]], dvec = matrix(0,92,1), Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port_glasso[[t]]<-colSums(aus)
}
pport_glasso<-as.matrix(cbind(unlist(port_glasso)))
p_glasso_cum<-cumsum(pport_glasso)
## TIME WINDOWS
date<-prezzi$Date
date<-as.Date.factor(date, format="%m/%d/%Y")
dt<-list()
for(t in 1: 140){
dt[[t]]<-date[[t*21]]
}
dt<-as.Date(unlist(dt))
psi<-data.frame(dt)
fix<-"2006-01-01"
fix<-data.frame(fix)
psi<-t(psi)
tw<-data.frame(fix$fix,psi)
tw<-t(tw)
tw2<-data.frame(tw)
tw3<-as.data.frame(tw2$dt)
tw3<-data.frame(tw3)
tw3<-tw3$tw2.dt
tw3<-as.matrix(tw3)
tw3<-tw3[-141]
time_window<-as.Date(as.character(tw3))
class(time_window)
RET<-cbind(pport_glasso,pportequally, pport0, pport0.005,pport0.025, pport0.05,pport0.15,pport0.7,pport, pport2, pport4)
colnames(RET)<-c("glasso", "equally weighted", "??=0", "??=0.005","??=0.025","??=0.05", "??=0.25","??=0.7","??=1", "??=2","??=4")
RET_cum<-cbind(p_glasso_cum,pp, p0, p0.005, p0.025, p0.05, p0.15, p0.7, p, pp2, p4)
RET_cum<-RET_cum-0.001*92
RET_cum<-cbind(MSW_cum,RET_cum)
RET_cum<-zoo(RET_cum)
All_VaR<-cbind(abs(unlist(VaR_MSW)),unlist(VaR_port_equally),unlist(VaR_port0.005),unlist(VaR_port0.025), unlist(VaR_port0.05),unlist(VaR_port0.15), unlist(VaR_port0.7),unlist(VaR_port),unlist(VaR_port2), unlist(VaR_port4))
All_VaR_zoo<-zoo(-All_VaR,time_window)
All_CVaR<-cbind(abs(unlist(CVaR_MSW)),unlist(CVaR_port_equally),unlist(CVaR_port0.005),unlist(CVaR_port0.025), unlist(CVaR_port0.05),unlist(CVaR_port0.15), unlist(CVaR_port0.7),unlist(CVaR_port),unlist(CVaR_port2), unlist(CVaR_port4))
All_CVaR_zoo<-zoo(-All_CVaR,time_window)
## EMPIRICAL COV MATRIX (one etf per class)
returnstd<-returnstd[,c(1,5,13,24,27,29,54,67,74,86,92)]
W<-list()
for(t in 0: 139){
W[[(t+1)]]=returnstd[(1+t*21):(250+t*21),]
}
W_in<-list()
W_out<-list()
for(t in 1: 140){
W_in[[(t)]]=W[[t]][c(1:229),]
W_out[[(t)]]=W[[t]][c(230:250),]
}
C <- list()
for(t in 1: length(W_in)){
C[[(t)]] =cor(W_in[[(t)]])
}
Dist <- list()
for(t in 1: length(W_in)){
C[[t]]<-as.matrix(C[[t]])
Dist[[t]]<-sqrt(2-2*C[[t]])
Dist[[t]]<-as.matrix(Dist[[t]])
Dist[[t]][is.nan(Dist[[t]])]<-0
colnames(Dist[[(t)]])<-colnames(returnstd)
rownames(Dist[[(t)]])<-colnames(returnstd)
}
ciao<-list()
nodes2 <- read.csv("nodes2.csv", header=T, as.is=T)
nodes<-nodes2[c(1,5,13,24,27,29,54,67,74,86,92),]
nodes<-as.data.frame(nodes)
colnames(nodes)<-c("id","label","class")
nodes
for(t in 1: length(W)){
ciao[[t]]<-as.numeric(unlist(Dist[[t]]))
ciao[[t]]<-matrix(ciao[[t]],11,11)
colnames(ciao[[t]])<-nodes$id
rownames(ciao[[t]])<-nodes$id
}
A<-list()
network<-list()
Edgelist<-list()
weight<-list()
links2<-list()
for(t in 1: length(W)){
network[[t]]=graph_from_adjacency_matrix(ciao[[t]],weighted=T, mode="undirected", diag=F)
Edgelist[[t]]<-get.edgelist(network[[t]])
weight[[t]]<-E(network[[t]])$weight
A[[t]]<-cbind(Edgelist[[t]],weight[[t]])
A[[t]]<-as.matrix(A[[t]])
links2[[t]]<-as.data.frame(A[[t]])
colnames(links2[[t]])<-c("from","to","weight")
}
net<-list()
mst<-list()
for(t in  1: length(W)){
net[[t]]<- graph_from_data_frame(d=links2[[t]], vertices=nodes, directed=F)
mst[[t]] <- minimum.spanning.tree(net[[t]])
}
EIGEN_cent<-list()
eigencent<-list()
bet<-list()
for(t in 1: length(W)){
EIGEN_cent[[t]]<-eigen_centrality(mst[[t]], directed = FALSE, scale = TRUE,options = arpack_defaults)
eigencent[[t]]<-EIGEN_cent[[t]]$vector
round(eigencent[[t]],3)
eigencent[[t]]<-as.matrix(eigencent[[t]])
bet[[t]]<-as.matrix(betweenness(mst[[t]], directed = F))
eigencent[[t]]<- -(eigencent[[t]])
bet[[t]]<- -(bet[[t]])
}
r<-list()
meanret<-list()
stdev<-list()
g<-list()
COV<-list()
for(t in 1: length(W_in)){
r[[t]] <- matrix(colMeans(W_in[[t]]), nrow=1)
meanret[[t]]<-sum(r[[t]])/92
stdev[[t]]<-apply(W_in[[t]],2,sd)
stdev[[t]]<-matrix(stdev[[t]]) #sd vector
rownames(stdev[[t]])<-colnames(W_in[[t]])
g[[t]]<-stdev[[t]]%*%t(stdev[[t]])
COV[[t]]<-g[[t]]*C[[t]]
COV[[t]]<-as.matrix(COV[[t]])
}
B<-list()
f<-list()
sol<-list()
w<-list()
z<-list()
z1<-list()
port_emp_cov<-list()
VaR_port0.005<-list()
for(t in 1: 140){
B[[t]]<- matrix(1,1,11)
B[[t]]<- rbind(B[[t]], r[[t]], diag(11),-diag(11))
f[[t]]<- c(1, meanret[[t]], rep(0,11),rep(-1,11))
sol[[t]]<- solve.QP(Dmat=COV[[t]], dvec = 0.005*eigencent[[t]], Amat=t(B[[t]]), bvec=f[[t]], meq=1)
w[[t]]<-round(sol[[t]]$solution,6)
w[[t]]<-matrix(w[[t]])
z[[t]]<-as.matrix(cbind(nodes$id,nodes$class,w[[t]]))
z[[t]]<-as.data.frame(z[[t]])
colnames(z[[t]])<-c("id","class","weights")
z1[[t]]<-z[[t]]$weights
VaR_port0.005[[t]]<-ETL(W_out[[t]], weights=w[[t]], p=0.95, portfolio_method ="component", method="modified")$MES
aus<-repmat(w[[t]],1,21)*t(W_out[[t]])
aus<-as.matrix(aus)
port_emp_cov[[t]]<-colSums(aus)
}
port_emp_cov<-as.matrix(cbind(unlist(port_emp_cov)))
ret_cum_empcov<-cumsum(port_emp_cov)
RET_cum<-cbind(RET_cum,ret_cum_empcov)
colnames(RET_cum)<-c("MSW", "glasso", "equally weighted", "gamma=0", "gamma=0.005","gamma=0.025",
"gamma=0.05", "gamma=0.15","gamma=0.7","gamma=1", "gamma=2","gamma=4","COV")
# Set a color scheme:
tsRainbow <- rainbow(ncol(RET_cum))
# Plot the overlayed series
plot(x = RET_cum, ylab = "Cumulative Return", main = "Cumulative Returns",
col = tsRainbow, screens = 1)
legend(x = "bottomright", inset=c(-0.01,0.03), y.intersp = 1,
legend = c("MSW", "glasso", "equally weighted", "gamma=0", "gamma=0.005","gamma=0.025",
"gamma=0.05", "gamma=0.15","gamma=0.7","gamma=1", "gamma=2","gamma=4","COV"),
lty=1,col = tsRainbow,cex = .5)
