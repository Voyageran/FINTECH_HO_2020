## AI Market Risk Use Case VIII "Convergence and Divergence in European Bond Correlations"
#
# computes filtered average correlation influences for monthly returns of 10-year European bonds in three-year windows
#
# Peter Schwendner, Martin Schuele and Martin Hillebrand
# Zurich University of Applied Sciences, 1.9.2019
# for EU Horizon 2020 FIN-TECH project
#
# implementation and application reference:
# Schwendner, Peter; Schuele, Martin; Ott, Thomas; Hillebrand, Martin:
# European government bond dynamics and stability policies : taming contagion risks.
# Journal of network theory in finance. 1(4), S. 1-25, 2015.
# and ESM Working Paper #8, 2015.
# original correlation influence network reference:
# Kenett, D. Y., Tumminello, M., Madi, A., Gur-Gershgoren, G., Mantegna,
# R. N., and Ben-Jacob, E. (2010). Dominating clasp of the financial
# sector revealed by partial correlation analysis of the stock market.
# PloS one, 5(12):e15032, 2010.
setwd("/home/rstudio")
#rm(list=ls())
library(HH)
library(seriation)
library(purrr)
library(magclass)
library(ppcor)
options(warn=-1)
## AI Market Risk Use Case VIII "Convergence and Divergence in European Bond Correlations"
#
# computes filtered average correlation influences for monthly returns of 10-year European bonds in three-year windows
#
# Peter Schwendner, Martin Schuele and Martin Hillebrand
# Zurich University of Applied Sciences, 1.9.2019
# for EU Horizon 2020 FIN-TECH project
#
# implementation and application reference:
# Schwendner, Peter; Schuele, Martin; Ott, Thomas; Hillebrand, Martin:
# European government bond dynamics and stability policies : taming contagion risks.
# Journal of network theory in finance. 1(4), S. 1-25, 2015.
# and ESM Working Paper #8, 2015.
# original correlation influence network reference:
# Kenett, D. Y., Tumminello, M., Madi, A., Gur-Gershgoren, G., Mantegna,
# R. N., and Ben-Jacob, E. (2010). Dominating clasp of the financial
# sector revealed by partial correlation analysis of the stock market.
# PloS one, 5(12):e15032, 2010.
setwd("/home/rstudio")
#rm(list=ls())
library(HH)
library(seriation)
library(purrr)
library(magclass)
library(ppcor)
options(warn=-1)
## read ECB SDW data
# Dataset name	Interest rate statistics (2004 EU Member States & ACCBs)
# Frequency	Monthly
# Interest rate type	Long-term interest rate for convergence purposes
# Transaction type	Debt security issued
# Maturity category	10 years
# BS counterpart sector	Unspecified counterpart sector
# IR business coverage	New business
# Interest rate type (fix/var)	Unspecified
#
# Source: https://sdw.ecb.europa.eu/browseChart.do?org.apache.struts.taglib.html.TOKEN=bb457d260e6e6ddc0de9f723729ebae8&df=true&ec=&dc=&oc=&pb=&rc=&DATASET=0&removeItem=&removedItemList=&mergeFilter=&activeTab=IRS&showHide=&MAX_DOWNLOAD_SERIES=500&SERIES_MAX_NUM=50&node=9691124&legendRef=reference&legendPub=published&legendNor=&SERIES_KEY=229.IRS.M.BG.L.L40.CI.0000.BGN.N.Z&SERIES_KEY=229.IRS.M.CZ.L.L40.CI.0000.CZK.N.Z&SERIES_KEY=229.IRS.M.DK.L.L40.CI.0000.DKK.N.Z&SERIES_KEY=229.IRS.M.GB.L.L40.CI.0000.GBP.N.Z&SERIES_KEY=229.IRS.M.HR.L.L40.CI.0000.HRK.N.Z&SERIES_KEY=229.IRS.M.HU.L.L40.CI.0000.HUF.N.Z&SERIES_KEY=229.IRS.M.PL.L.L40.CI.0000.PLN.N.Z&SERIES_KEY=229.IRS.M.RO.L.L40.CI.0000.RON.N.Z&SERIES_KEY=229.IRS.M.SE.L.L40.CI.0000.SEK.N.Z&SERIES_KEY=229.IRS.M.AT.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.BE.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.CY.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.DE.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.ES.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.FI.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.FR.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.GR.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.IE.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.IT.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.LT.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.LU.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.LV.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.MT.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.NL.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.PT.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.SI.L.L40.CI.0000.EUR.N.Z&SERIES_KEY=229.IRS.M.SK.L.L40.CI.0000.EUR.N.Z
imp=read.table("data_EU27import.txt",header=TRUE)
Nassets=ncol(imp)-1
# extract dates
dsdate=as.Date(imp$date,format="%d.%m.%Y")
# extract yields
yields=data.matrix(imp[,2:(Nassets+1)])
# Plot yields
ts.plot(yields,gpars= list(col=rainbow(10)))
# monthly returns
returns <- -diff(yields)
returns[is.nan(returns)] <- 0
## calc time slices
#initially, each calendar year maps to one time slice.
slice = 1
timeindex <- c()
timeindex[slice] = 1
for (i in 1:(length(returns[,1])-1)) {
if (as.numeric(format(dsdate[i],'%Y')) < as.numeric(format(dsdate[i+1],'%Y'))){
slice <- slice + 1
cat(sprintf("slice %s starts; year cutoff at %s\n", slice, dsdate[i+1]))
timeindex[slice] <- i+1
}
}
Nslices <- slice
timeindex[slice+1] <- length(returns[,1])+1 # this next date point does not exist.
# shrink yearly to 3-year timeslices because of ECB monthly data
timeindex=timeindex[seq(1,Nslices+1,3)]
Nslices=length(timeindex)-1
for(i in 1:length(timeindex)-1)
{
cat(sprintf("slice %s starts; year cutoff at %s\n", i, dsdate[timeindex[i]]))
}
## Compute bootstrap filter
Nassets <- length(returns[1,])
C <- array(rep(0, Nassets*Nassets*Nslices), dim=c(Nassets, Nassets, Nslices))
std_avg3 <- array(rep(0, Nassets*Nassets*Nslices), dim=c(Nassets, Nassets, Nslices))
for (t in 1:Nslices) {
# calc corr mat in time window [i-period; i]
cat(sprintf("t=%s,from=%s,to=%s\n",t,timeindex[t],timeindex[t+1]-1))
# calc stddev of bootstrapped corr matrices
ds <- returns[timeindex[t]:(timeindex[t+1]-1),]
C[,,t] <- cor(ds)
# (block) bootstrap
Nb = 100 #100 for demo, 10000 for better convergence
bM_z0 <- array(rep(0, Nassets*Nassets*Nassets*Nb), dim=c(Nassets, Nassets, Nassets, Nb))
for (b in 1:Nb){
# wild block bootstrap would need random block length
blocklaenge <- 1 #round(runif(1,1,10)) # 1 for standard bootstrap, >1 for block bootstrap
# choose col vector with upper limits of the random indices
rndvecHi <- (nrow(ds)-blocklaenge+1)*rep(1,floor(nrow(ds)/blocklaenge))
# compute random indices for the first day of this block
rndvec_short <- rdunif(length(rndvecHi), max(rndvecHi), a = 1)
rndvec <- c() # wird tageweise aufgebaut
for (i in 0:(blocklaenge-1)){ # glue together the single days of this block
rndvec <- c(rndvec, rndvec_short+i)
}
rnd_returnmatrix <- ds[rndvec,]
brho_z <- cor(rnd_returnmatrix)
brho_z[is.na(brho_z)] <- 0
# take care of NaNs
testrows <- rowSums(brho_z)
testrows[testrows == 1] <- 0
testrows[testrows != 0] <- 1
brho_z <- brho_z*testrows
brho3_z <- array(rep(0, Nassets*Nassets*Nassets), dim=c(Nassets, Nassets, Nassets)) # preallocate partial correlation matrix
bd_z0 <- array(rep(0, Nassets*Nassets*Nassets), dim=c(Nassets, Nassets, Nassets))
#
for (n in 1:Nassets){
z <- rnd_returnmatrix[,n]
brho2_z <- partial.corr(rnd_returnmatrix,z)
brho2_z[is.na(brho2_z)] <- 0
# take care of NaNs
testrows2 <- rowSums(brho2_z)
testrows2[testrows2 != 1] <- 0
testrows2 <- (testrows2-1)^2
brho2_z <- brho2_z*testrows2
brho2_z[n,] <- 0
brho2_z[,n] <- 0
brho2_z[brho2_z == 0] <- NA
brho3_z[,,n] <- brho2_z
bd_z0[,,n] <- brho_z-brho3_z[,,n]
}
bdkc <- aperm(bd_z0,c(3,2,1)) # this permutes connectivity matrix d(i,j,k) to d(k,j,i): node k points to node j
bdkc[is.na(bdkc)] <- 0
bM_z0[,,,b] <- bdkc
}
std_avg3[,,t] <- (1/(Nassets-2))*apply((apply(bM_z0,c(1,2,4),sum)), c(1,2), sd, na.rm=TRUE) # this computes the average influence of node k on the node j correlations to all other nodes i
}
# Directed influence network ------------------------------------------------
Nreturns <- length(returns[,1])
Nassets <- length(returns[1,])
# Nslices of Nreturns x Nreturns matrices of filtered correlation influences
Dk_connect_t <- array(rep(0, Nassets*Nassets*Nslices), dim=c(Nassets, Nassets, Nslices))
# Nslices of Nreturns x Nreturns matrices of unfiltered correlation influences
dk_connect_t <- array(rep(0, Nassets*Nassets*Nslices), dim=c(Nassets, Nassets, Nslices))
for (t in 1:Nslices){
ds <- returns[timeindex[t]:(timeindex[t+1]-1),]
rho_z <- cor(ds)
rho_z[is.na(rho_z)] <- 0
# take care of NaNs
testrows3 <- rowSums(rho_z)
testrows3[testrows3 == 1] <- 0
testrows3[testrows3 != 0] <- 1
rho_z <- rho_z*testrows3
z <- array(rep(0, Nreturns*1), dim=c(Nreturns, 1))
# partial corr
rho3_z <- array(rep(0, Nassets*Nassets*Nassets), dim=c(Nassets, Nassets, Nassets))
d_z0 <- array(rep(0, Nassets*Nassets*Nassets), dim=c(Nassets, Nassets, Nassets))
d_z <- array(rep(0, Nassets*Nassets*Nassets), dim=c(Nassets, Nassets, Nassets))
for (n in 1:Nassets){
z <- ds[,n]
rho2_z <- partial.corr(ds,z)
rho2_z[is.na(rho2_z)] <- 0
testrows4 <- rowSums(rho2_z)
testrows4[testrows4 != 1] <- 0
testrows4 <- (testrows4-1)^2
rho2_z <- rho2_z*testrows4
rho2_z[n,] <- 0
rho2_z[,n] <- 0
rho2_z[rho2_z == 0] <- NA
rho3_z[,,n] <- rho2_z
d_z0[,,n] <- rho_z-rho3_z[,,n]
}
dkc <- aperm(d_z0,c(3,2,1)) #this permutes connectivity matrix d(i,j,k) to d(k,j,i): node k points to node j
dkc[is.na(dkc)] <- 0
# compute average corr influence
dk_connect <- (1/(Nassets-2))*apply(dkc,c(1,2),sum) # this computes the average influence of node k on the node j correlations to all other nodes i
# select for one direction
Dk <- array(rep(1, dim(dk_connect)[1]*dim(dk_connect)[2]), dim=dim(dk_connect))
Dk_connect <- Dk*dk_connect
# absolute strength of corr influence needs to be at least 3 stddev
Dkabs <- array(rep(1, dim(dk_connect)[1]*dim(dk_connect)[2]), dim=dim(dk_connect))
Dkabs[abs(Dk_connect) < (3*std_avg3[,,t])] <- 0
Dk_connect <- Dk_connect * Dkabs # apply bootstrap filter
# store time slices in array
Dk_connect_t[,,t] <- Dk_connect # filtered correlation influences
dk_connect_t[,,t] <- dk_connect # unfiltered correlation influences
}
if(!dir.exists("export")){
dir.create("export")
}
## export to csv files for network viz
#network output on 3-year time grid
write.table(dk_connect_t, file = "export/dk_connect_t.csv",row.names=FALSE,col.names=FALSE) # unfiltered networks (9 matrices, each 27x27)
write.table(dsdate[timeindex[1:Nslices]], file = "export/startdates.csv",row.names=FALSE,col.names=FALSE) # start month of each of the 9 time slices
write.table(dsdate[timeindex[1:Nslices+1]-1], file = "export/enddates.csv",row.names=FALSE,col.names=FALSE) # end month
write.table(std_avg3, file = "export/std_avg3.csv",row.names=FALSE,col.names=FALSE) # stddev of bootstrapped noise (9 matrices, each 27x27)
#10y bond yields on monthly time scale
write.table(yields, file = "export/yields.csv",row.names=FALSE,col.names=FALSE) # 317 monthly yields of 27 markets
write.table(colnames(yields), file = "export/markets.csv",row.names=FALSE,col.names=FALSE) # 27 markets
write.table(dsdate,file="export/datestr(mDate).csv",row.names=FALSE,col.names=FALSE) # 317 monthly dates
