####################################
p1<-ggplot( DF, aes( X1, X2))+  geom_point(aes(color = type_assets),size = 4) +
scale_color_manual(values = c("red", "green", "blue","black"))+theme_classic()+
geom_text(data = filter(DF, label_show==1),aes(label=symb_assets))+
labs(title = "Tail factor vs. Moment factor",x="Tail Factor", y="Moment factor")+
geom_density_2d(aes(color = type_assets),contour=TRUE)
p1
p2<-ggplot( DF, aes( X1, X3))+  geom_point(aes(color = type_assets),size = 4) +
scale_color_manual(values = c("red", "green", "blue","black"))+theme_classic()+
geom_text(data = filter(DF, label_show==1),aes(label=symb_assets))+
labs(title = "Tail factor vs. Memory factor",x="Tail Factor", y="Memory factor")+
geom_density_2d(aes(color = type_assets),contour=TRUE)
p2
p3<-ggplot( DF, aes( X2, X3))+  geom_point(aes(color = type_assets),size = 4) +
scale_color_manual(values = c("red", "green", "blue","black"))+theme_classic()+
geom_text(data = filter(DF, label_show==1),aes(label=symb_assets))+
labs(title = "Moment factor vs. Memory factor",x="Moment Factor", y="Memory factor")+
geom_density_2d(aes(color = type_assets),contour=TRUE)
p3
###########################
#3D Scatter Plot
##########################
scatterplot3d(DF[,1:3], pch = 16, color=colors,   main="3D Scatter Plot",
xlab = "Tail Factor",
ylab = "Moment Factor",
zlab = "Memory Factor")
#####################################
#Linear Discriminant Analysis
####################################
DF$type_crypto=as.numeric(apply(DF, 1, function(r) any(r %in% "Crypto")))+1
mdl <- lda(type_crypto ~ X1+X2, data = DF)
# draw discrimination line
np <- 1000
nd.x <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd.y <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mdl, newdata = nd)$class)
plot( DF[,1:2],
col=colors,
xlab = "Tail Factor",
ylab = "Moment factor", main="Tail factor vs. Moment factor",
cex.lab = 1, cex.axis = 1, cex.main = 1,
pch = 20, cex = 1.5)
points(F[index_show,1],  F[index_show,2],col="green",pch = 20,type="p",cex = 1.5)
text(F[index_show,1],  F[index_show,2], Check,cex = 1)
#points(mdl$means, pch = "+", cex = 2, col = c("green", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE,col="red")
#####################################
#Quadratic Discriminant Analysis
####################################
mdl1 <- qda(type_crypto ~ X1+X2, data = DF)
# draw discrimination curve
np <- 1000
nd.x <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd.y <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd1 <- as.numeric(predict(mdl1, newdata = nd)$class)
plot( DF[,1:2],
col=colors,
xlab = "Tail Factor",
ylab = "Moment factor", main="Tail factor vs. Moment factor",
cex.lab = 1, cex.axis = 1, cex.main = 1,
pch = 20, cex = 1.5)
points(F[index_show,1],  F[index_show,2],col="green",pch = 20,type="p",cex = 1.5)
text(F[index_show,1],  F[index_show,2], Check,cex = 1)
#points(mdl$means, pch = "+", cex = 2, col = c("green", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd1, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE,col="red")
######################################################
#Support Vector Machines#
#####################################################
svmfit <- svm(type_crypto ~ X1+X2, data = DF)
svmfit
p<-plot(svmfit, data = DF[,c(1,2,8)])
p
p1<-ggplot( DF, aes( X1, X2))+  geom_point(aes(color = type_assets),size = 2) +
scale_color_manual(values = c("red", "green", "blue","black"))+theme_classic()+
geom_text(data = filter(DF, label_show==1),aes(label=symb_assets))+
labs(title = "Tail factor vs. Moment factor",x="Tail Factor", y="Moment factor")+
geom_density_2d(aes(color = type_assets),contour=TRUE)
p1
p2<-ggplot( DF, aes( X1, X3))+  geom_point(aes(color = type_assets),size = 2) +
scale_color_manual(values = c("red", "green", "blue","black"))+theme_classic()+
geom_text(data = filter(DF, label_show==1),aes(label=symb_assets))+
labs(title = "Tail factor vs. Memory factor",x="Tail Factor", y="Memory factor")+
geom_density_2d(aes(color = type_assets),contour=TRUE)
p2
p3<-ggplot( DF, aes( X2, X3))+  geom_point(aes(color = type_assets),size = 2) +
scale_color_manual(values = c("red", "green", "blue","black"))+theme_classic()+
geom_text(data = filter(DF, label_show==1),aes(label=symb_assets))+
labs(title = "Moment factor vs. Memory factor",x="Moment Factor", y="Memory factor")+
geom_density_2d(aes(color = type_assets),contour=TRUE)
p3
svmfit <- svm(as.factor(type_crypto) ~ X1+X2, data = DF)
svmfit
p<-plot(svmfit, data = DF[,c(1,2,8)])
p
# Encoding the target feature as factor
DF$type_crypto = factor(DF$type_crypto, levels = c(0, 1))
DF$type_crypto=as.numeric(apply(DF, 1, function(r) any(r %in% "Crypto")))
mdl <- lda(type_crypto ~ X1+X2, data = DF)
# draw discrimination line
np <- 1000
nd.x <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd.y <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mdl, newdata = nd)$class)
plot( DF[,1:2],
col=colors,
xlab = "Tail Factor",
ylab = "Moment factor", main="Linear Discriminant Analysis",
cex.lab = 1, cex.axis = 1, cex.main = 1,
pch = 20, cex = 1.5)
points(F[index_show,1],  F[index_show,2],col="green",pch = 20,type="p",cex = 1.5)
text(F[index_show,1],  F[index_show,2], Check,cex = 1)
#points(mdl$means, pch = "+", cex = 2, col = c("green", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE,col="red")
#####################################
#Quadratic Discriminant Analysis
####################################
mdl1 <- qda(type_crypto ~ X1+X2, data = DF)
# draw discrimination curve
np <- 1000
nd.x <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd.y <- seq(from = min(DF$X1), to = max(DF$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd1 <- as.numeric(predict(mdl1, newdata = nd)$class)
plot( DF[,1:2],
col=colors,
xlab = "Tail Factor",
ylab = "Moment factor", main="Quadratic Discriminant Analysis",
cex.lab = 1, cex.axis = 1, cex.main = 1,
pch = 20, cex = 1.5)
points(F[index_show,1],  F[index_show,2],col="green",pch = 20,type="p",cex = 1.5)
text(F[index_show,1],  F[index_show,2], Check,cex = 1)
#points(mdl$means, pch = "+", cex = 2, col = c("green", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd1, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE,col="red")
######################################################
#Support Vector Machines#
#####################################################
# Encoding the target feature as factor
DF$type_crypto = factor(DF$type_crypto, levels = c(0, 1))
svmfit <- svm(type_crypto ~ X1+X2, data = DF)
svmfit
p<-plot(svmfit, data = DF[,c(1,2,8)])
p
classifier = svm(formula = type_crypto ~ X1+X2, data = DF,
type = 'C-classification',
kernel = 'radial')
set =DF
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'coral1', 'aquamarine'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, 8],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'coral1', 'aquamarine'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
plot(set[, 8],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'coral1', 'aquamarine'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
DF[-8] = scale(DF[-8])
View(DF)
plot(set[, 8],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'coral1', 'aquamarine'))
points(set, pch = 21, bg = ifelse(set[, 8] == 1, 'green4', 'red3'))
plot(set[, 8],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = FALSE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'coral1', 'aquamarine'))
points(set, pch = 21, bg = ifelse(set[, 8] == 1, 'green4', 'red3'))
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = FALSE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 21, col=colors))
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = FALSE)
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 21, col=colors)
lot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = FALSE)
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red",add = FALSE)
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF,
type = 'C-classification',
kernel = 'rbf')
classifier = svm(formula = type_crypto ~ X1+X2, data = DF,
kernel="radial",cost=5,scale=F)
set =DF
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF,
kernel="radial",cost=10,scale=F)
set =DF
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF,
kernel="radial",cost=10,scale=F)
set =DF
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF,
kernel="radial",cost=1,scale=F)
set =DF
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2id_y=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
x_raw= meshgrid(grid_x, grid_y);
grid_set = expand.grid(X1, X2)
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
grid_set =  meshgrid(X1, X2);
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
View(grid_set)
grid_set =  meshgrid(X1, X2);
x1 = array(x_raw[[1]]);
x2 = array(x_raw[[2]]);
grid_set=cbind(x1,x2);
colnames(grid_set) = c('X1', 'X2')
x_raw =  meshgrid(X1, X2);
x1 = array(x_raw[[1]]);
x2 = array(x_raw[[2]]);
grid_set=cbind(x1,x2);
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF,
kernel="radial",cost=1,scale=T)
set =DF
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF)
set =DF
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF)
set =DF
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2) ,pch = 20, cex = 1.5 )
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
classifier = svm(formula = type_crypto ~ X1+X2, data = DF)
set =DF
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2) ,pch = 20, cex = 1.5 )
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
# Encoding the target feature as factor
DF$type_crypto = factor(DF$type_crypto, levels = c(0, 1))
classifier = svm(formula = type_crypto ~ X1+X2, data = DF)
set =DF
grid_add=1.15;
X1=seq(from =min(set[,1])-grid_add, to = max(set[,1]+grid_add), by =0.05)
X2=seq(from =min(set[,2])-grid_add, to = max(set[,2]+grid_add), by =0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('X1', 'X2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[,1:2],
main = 'SVM',
xlab = 'Tail Factor', ylab = 'Moment Factor',
xlim = range(X1), ylim = range(X2) ,pch = 20, cex = 1.5 )
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), col="red")
#points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'white', 'white'))
points(set, pch = 20, col=colors)
text(set[index_show,1],  set[index_show,2], Check,cex = 1)
data <- readMat('dynamic_dataset.mat')
library(R.matlab)
data <- readMat('dynamic_dataset.mat')
# # Name of Quantlet: DFA_cryptos
# #
#
# Description: 'Dynamic projection of a dataset of 23 variables, describing cryptos,
# stocks, FX and commodities on a 3D space defined by the three factors
# extracted using Factor Analysis.'
#
# Keywords: cryptocurrency, genus proximum, classiffication, multivariate analysis, factor models
#
# Author : Daniel Traian Pele
#
# See also : SFA_cryptos
#
#
#
# Datafiles : 'dynamic_dataset.mat'
#################################################################
#- Clear Environment -#
rm(list = ls())
graphics.off()
setwd("D:\\PROIECTE\\HORIZON 2020\\Use Case DP")
#Packages
# install.packages("R.matlab")
library(R.matlab)
data <- readMat('dynamic_dataset.mat')
rm(list = ls())
graphics.off()
library(R.matlab)
data <- readMat('dynamic_dataset.mat')
data.to_csv"data.csv"
write.csv(data, "data.csv")
